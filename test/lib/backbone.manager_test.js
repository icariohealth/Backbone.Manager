var expect;

expect = chai.expect;

beforeEach(function() {
  return this.sinon = sinon.sandbox.create();
});

afterEach(function() {
  return this.sinon.restore();
});

describe('Backbone.Manager', function() {
  beforeEach(function() {
    return this.router = new Backbone.Router();
  });
  afterEach(function() {
    return delete this.router;
  });
  describe('constructor', function() {
    return it('should call initialize', function() {
      var initSpy;
      initSpy = this.sinon.spy(Backbone.Manager.prototype, 'initialize');
      new Backbone.Manager(this.router);
      return expect(initSpy).to.have.been.called;
    });
  });
  describe('_parseStates()', function() {
    it("should throw error if transitionMethod for a state isn't defined", function() {
      var manager;
      manager = Backbone.Manager.extend({
        states: {
          test: {}
        }
      });
      return expect(function() {
        return new manager(this.router);
      }).to["throw"](/transitionMethod/);
    });
    it('should listen for event related to state', function() {
      var cachedListenTo, listenToStub;
      cachedListenTo = Backbone.Events.listenTo;
      listenToStub = this.sinon.stub(Backbone.Events, 'listenTo', function() {
        return cachedListenTo.apply(this, arguments);
      });
      new (Backbone.Manager.extend({
        states: {
          test: {
            transitionMethod: 'a',
            url: 'a/:a_id/b/:b_id'
          }
        }
      }))(this.router);
      return expect(listenToStub).to.have.been.calledWith(sinon.match.any, 'test', sinon.match.any);
    });
    return context('state url defined', function() {
      it('should throw error if url is regex', function() {
        var manager;
        manager = Backbone.Manager.extend({
          states: {
            test: {
              transitionMethod: 'a',
              url: /^(.*?)\/open$/
            }
          }
        });
        return expect(function() {
          return new manager(this.router);
        }).to["throw"](/not allowed to have a RegExp url/);
      });
      it('should store the correct url params', function() {
        var manager;
        manager = new (Backbone.Manager.extend({
          states: {
            test: {
              transitionMethod: 'a',
              url: 'a/:a_id/b/:b_id'
            }
          }
        }))(this.router);
        return expect(manager.states.test._urlParams).to.have.members(['a_id', 'b_id']);
      });
      it('should build a url template able to replace params from object', function() {
        var manager, obj;
        manager = new (Backbone.Manager.extend({
          states: {
            test: {
              transitionMethod: 'a',
              url: 'a/:a_id/b/:b_id'
            }
          }
        }))(this.router);
        obj = {
          a_id: 1,
          b_id: 2
        };
        return expect(manager.states.test._urlAsTemplate(obj)).to.equal('a/1/b/2');
      });
      it('should set regex from url, built same as router', function() {
        var manager;
        manager = new (Backbone.Manager.extend({
          states: {
            test: {
              transitionMethod: 'a',
              url: 'a/:a_id/b/:b_id'
            }
          }
        }))(this.router);
        return expect(manager.states.test._urlAsRegex + '').to.equal(this.router._routeToRegExp(manager.states.test.url) + '');
      });
      return it('should register regex url inside router', function() {
        var manager, routeSpy;
        routeSpy = this.sinon.spy(this.router, 'route');
        manager = new (Backbone.Manager.extend({
          states: {
            test: {
              transitionMethod: 'a',
              url: 'a/:a_id/b/:b_id'
            }
          }
        }))(this.router);
        return expect(routeSpy).to.have.been.calledWith(manager.states.test._urlAsRegex);
      });
    });
  });
  describe('_routeCallbackChooser()', function() {
    it('should not call loadCallback if pageload url is different from current url', function() {
      var loadCallbackStub, manager;
      manager = new (Backbone.Manager.extend({
        _getWindowHref: function() {
          return 'http://a.b';
        }
      }))(this.router);
      loadCallbackStub = this.sinon.stub(manager, '_handleLoadCallback');
      this.sinon.stub(manager, '_handleTransitionCallback');
      manager._routeCallbackChooser('', {}, false);
      return expect(loadCallbackStub).to.not.have.been.called;
    });
    it('should call transitionCallback if pageload url is different from current url', function() {
      var manager, transitionCallbackStub;
      manager = new (Backbone.Manager.extend({
        _getWindowHref: function() {
          return 'http://a.b';
        }
      }))(this.router);
      transitionCallbackStub = this.sinon.stub(manager, '_handleTransitionCallback');
      manager._routeCallbackChooser('', {}, false);
      return expect(transitionCallbackStub).to.have.been.called;
    });
    return it('should call loadCallback if pageload url is current url, but only once', function() {
      var loadCallbackStub, manager;
      manager = new Backbone.Manager(this.router);
      loadCallbackStub = this.sinon.stub(manager, '_handleLoadCallback');
      this.sinon.stub(manager, '_handleTransitionCallback');
      manager._routeCallbackChooser();
      manager._routeCallbackChooser();
      return expect(loadCallbackStub).to.have.been.calledOnce;
    });
  });
  describe('_handleLoadCallback()', function() {
    it("should throw error if loadMethod for a state isn't defined", function() {
      var manager;
      manager = new Backbone.Manager(this.router);
      return expect(function() {
        return manager._handleLoadCallback();
      }).to["throw"](/loadMethod/);
    });
    it('should trigger generic and specific pre-events in that order', function() {
      var manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger');
      triggerSpy.withArgs('pre-load');
      triggerSpy.withArgs('pre-load:testState');
      manager._handleLoadCallback('testState', {
        loadMethod: 'test'
      });
      return expect(triggerSpy.withArgs('pre-load:testState')).to.have.been.calledAfter(triggerSpy.withArgs('pre-load'));
    });
    it('should trigger pre-event before callback', function() {
      var callbackSpy, manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger').withArgs('pre-load');
      callbackSpy = this.sinon.spy(manager, 'test');
      manager._handleLoadCallback('testState', {
        loadMethod: 'test'
      });
      return expect(triggerSpy).to.have.been.calledBefore(callbackSpy);
    });
    it('should trigger specific and generic post-events in that order', function() {
      var manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger');
      triggerSpy.withArgs('post-load');
      triggerSpy.withArgs('post-load:testState');
      manager._handleLoadCallback('testState', {
        loadMethod: 'test'
      });
      return expect(triggerSpy.withArgs('post-load:testState')).to.have.been.calledBefore(triggerSpy.withArgs('post-load'));
    });
    return it('should trigger post-event after callback', function() {
      var callbackSpy, manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger').withArgs('post-load');
      callbackSpy = this.sinon.spy(manager, 'test');
      manager._handleLoadCallback('testState', {
        loadMethod: 'test'
      });
      return expect(triggerSpy).to.have.been.calledAfter(callbackSpy);
    });
  });
  describe('_handleTransitionCallback()', function() {
    it('should trigger generic and specific pre-events in that order', function() {
      var manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger');
      triggerSpy.withArgs('pre-transition');
      triggerSpy.withArgs('pre-transition:testState');
      manager._handleTransitionCallback('testState', {
        transitionMethod: 'test'
      });
      return expect(triggerSpy.withArgs('pre-transition:testState')).to.have.been.calledAfter(triggerSpy.withArgs('pre-transition'));
    });
    it('should trigger pre-event before callback', function() {
      var callbackSpy, manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger').withArgs('pre-transition');
      callbackSpy = this.sinon.spy(manager, 'test');
      manager._handleTransitionCallback('testState', {
        transitionMethod: 'test'
      });
      return expect(triggerSpy).to.have.been.calledBefore(callbackSpy);
    });
    it('should trigger specific and generic post-events in that order', function() {
      var manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger');
      triggerSpy.withArgs('post-transition');
      triggerSpy.withArgs('post-transition:testState');
      manager._handleTransitionCallback('testState', {
        transitionMethod: 'test'
      });
      return expect(triggerSpy.withArgs('post-transition:testState')).to.have.been.calledBefore(triggerSpy.withArgs('post-transition'));
    });
    it('should trigger post-event after callback', function() {
      var callbackSpy, manager, triggerSpy;
      manager = new (Backbone.Manager.extend({
        test: function() {}
      }))(this.router);
      triggerSpy = this.sinon.spy(manager, 'trigger').withArgs('post-transition');
      callbackSpy = this.sinon.spy(manager, 'test');
      manager._handleTransitionCallback('testState', {
        transitionMethod: 'test'
      });
      return expect(triggerSpy).to.have.been.calledAfter(callbackSpy);
    });
    return context('state url defined', function() {
      before(function() {
        return this.managerProto = Backbone.Manager.extend({
          states: {
            test: {
              url: 'a/:id_1/b/:id_2/c/:id_3/d/:id_4',
              transitionMethod: 'test'
            }
          },
          test: function() {}
        });
      });
      context('args is Array', function() {
        it('should maintain order from array into url', function() {
          var manager, navigateStub;
          manager = new this.managerProto(this.router);
          navigateStub = this.sinon.stub(this.router, 'navigate');
          manager._handleTransitionCallback('test', manager.states.test, [1, 2, 3, 4]);
          return expect(navigateStub).to.have.been.calledWith('a/1/b/2/c/3/d/4');
        });
        it('should not fire navigate if historyHasUpdated', function() {
          var historyHasUpdated, manager, navigateStub;
          manager = new this.managerProto(this.router);
          navigateStub = this.sinon.stub(this.router, 'navigate');
          manager._handleTransitionCallback('test', manager.states.test, [1, 2, 3, 4], historyHasUpdated = true);
          return expect(navigateStub).to.not.have.been.called;
        });
        return it('should hand correct args to callback in order, mimicking router params callback', function() {
          var callbackSpy, manager;
          manager = new this.managerProto(this.router);
          callbackSpy = this.sinon.spy(manager, 'test');
          manager._handleTransitionCallback('test', manager.states.test, [1, 2, 3, 4]);
          return expect(callbackSpy).to.have.been.calledWithExactly('1', '2', '3', '4', null, sinon.match.object);
        });
      });
      return context('args is Object', function() {
        before(function() {
          return this.argObj = {
            id_2: 2,
            id_4: 4,
            id_1: 1,
            id_3: 3
          };
        });
        it('should maintain order from args in url', function() {
          var manager, navigateStub;
          manager = new this.managerProto(this.router);
          navigateStub = this.sinon.stub(this.router, 'navigate');
          manager._handleTransitionCallback('test', manager.states.test, this.argObj);
          return expect(navigateStub).to.have.been.calledWith('a/1/b/2/c/3/d/4');
        });
        it('should maintain order from args in url', function() {
          var historyHasUpdated, manager, navigateStub;
          manager = new this.managerProto(this.router);
          navigateStub = this.sinon.stub(this.router, 'navigate');
          manager._handleTransitionCallback('test', manager.states.test, this.argObj, historyHasUpdated = true);
          return expect(navigateStub).to.not.have.been.called;
        });
        return it('should hand correct args to callback in order', function() {
          var callbackSpy, manager;
          manager = new this.managerProto(this.router);
          callbackSpy = this.sinon.spy(manager, 'test');
          manager._handleTransitionCallback('test', manager.states.test, this.argObj);
          return expect(callbackSpy).to.have.been.calledWith('1', '2', '3', '4', null, sinon.match.object);
        });
      });
    });
  });
  return describe('_parseEvents()', function() {
    return it('should bind to key as event, value as callback', function() {
      var cachedOn, manager, onStub;
      cachedOn = Backbone.Events.on;
      onStub = this.sinon.stub(Backbone.Events, 'on', function() {
        return cachedOn.apply(this, arguments);
      });
      manager = new (Backbone.Manager.extend({
        events: {
          testEvent: 'testFunc'
        },
        testFunc: function() {}
      }))(this.router);
      return expect(onStub).to.have.been.calledWith('testEvent', manager.testFunc);
    });
  });
});

//# sourceMappingURL=data:application/json;base64,