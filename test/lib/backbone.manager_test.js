var expect;

expect = chai.expect;

beforeEach(function() {
  return this.sinon = sinon.sandbox.create();
});

afterEach(function() {
  return this.sinon.restore();
});

describe('Backbone.Manager', function() {
  describe('constructor', function() {
    beforeEach(function() {
      return this.router = new Backbone.Router();
    });
    return it('should call initialize', function() {
      var initSpy;
      initSpy = this.sinon.spy(Backbone.Manager.prototype, 'initialize');
      new Backbone.Manager(this.router);
      return expect(initSpy).to.have.been.called;
    });
  });
  return describe('#_parseStates', function() {
    it("should throw error if transitionMethod for a state isn't defined", function() {
      var manager;
      manager = Backbone.Manager.extend({
        states: {
          'test': {}
        }
      });
      return expect(manager.bind(null, this.router)).to["throw"](Error);
    });
    return it('');
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tib25lLm1hbmFnZXJfdGVzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBOztBQUFBLE1BQUEsR0FBUyxJQUFJLENBQUMsTUFBZCxDQUFBOztBQUFBLFVBR0EsQ0FBVyxTQUFBLEdBQUE7U0FDVCxJQUFDLENBQUEsS0FBRCxHQUFTLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBZCxDQUFBLEVBREE7QUFBQSxDQUFYLENBSEEsQ0FBQTs7QUFBQSxTQUtBLENBQVUsU0FBQSxHQUFBO1NBQ1IsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQUEsRUFEUTtBQUFBLENBQVYsQ0FMQSxDQUFBOztBQUFBLFFBUUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBLEdBQUE7QUFDM0IsRUFBQSxRQUFBLENBQVMsYUFBVCxFQUF3QixTQUFBLEdBQUE7QUFDdEIsSUFBQSxVQUFBLENBQVcsU0FBQSxHQUFBO2FBQ1QsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLFFBQVEsQ0FBQyxNQUFULENBQUEsRUFETDtJQUFBLENBQVgsQ0FBQSxDQUFBO1dBR0EsRUFBQSxDQUFHLHdCQUFILEVBQTZCLFNBQUEsR0FBQTtBQUMzQixVQUFBLE9BQUE7QUFBQSxNQUFBLE9BQUEsR0FBVSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQTVCLEVBQXVDLFlBQXZDLENBQVYsQ0FBQTtBQUFBLE1BRUksSUFBQSxRQUFRLENBQUMsT0FBVCxDQUFpQixJQUFDLENBQUEsTUFBbEIsQ0FGSixDQUFBO2FBSUEsTUFBQSxDQUFPLE9BQVAsQ0FBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BTEY7SUFBQSxDQUE3QixFQUpzQjtFQUFBLENBQXhCLENBQUEsQ0FBQTtTQVdBLFFBQUEsQ0FBUyxlQUFULEVBQTBCLFNBQUEsR0FBQTtBQUN4QixJQUFBLEVBQUEsQ0FBRyxrRUFBSCxFQUF1RSxTQUFBLEdBQUE7QUFDckUsVUFBQSxPQUFBO0FBQUEsTUFBQSxPQUFBLEdBQVUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFqQixDQUNSO0FBQUEsUUFBQSxNQUFBLEVBQ0U7QUFBQSxVQUFBLE1BQUEsRUFBUSxFQUFSO1NBREY7T0FEUSxDQUFWLENBQUE7YUFJQSxNQUFBLENBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFiLEVBQW1CLElBQUMsQ0FBQSxNQUFwQixDQUFQLENBQWtDLENBQUMsRUFBRSxDQUFDLE9BQUQsQ0FBckMsQ0FBNEMsS0FBNUMsRUFMcUU7SUFBQSxDQUF2RSxDQUFBLENBQUE7V0FNQSxFQUFBLENBQUcsRUFBSCxFQVB3QjtFQUFBLENBQTFCLEVBWjJCO0FBQUEsQ0FBN0IsQ0FSQSxDQUFBIiwiZmlsZSI6ImJhY2tib25lLm1hbmFnZXJfdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cbiMgS2VlcCAnQHNpbm9uIHNhbmRib3hlZCcgdG8gZXZlcnkgdGVzdCwgdXNlICdzaW5vbicgdG8gYnlwYXNzXG5iZWZvcmVFYWNoIC0+XG4gIEBzaW5vbiA9IHNpbm9uLnNhbmRib3guY3JlYXRlKClcbmFmdGVyRWFjaCAtPlxuICBAc2lub24ucmVzdG9yZSgpXG5cbmRlc2NyaWJlICdCYWNrYm9uZS5NYW5hZ2VyJywgLT5cbiAgZGVzY3JpYmUgJ2NvbnN0cnVjdG9yJywgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBAcm91dGVyID0gbmV3IEJhY2tib25lLlJvdXRlcigpXG5cbiAgICBpdCAnc2hvdWxkIGNhbGwgaW5pdGlhbGl6ZScsIC0+XG4gICAgICBpbml0U3B5ID0gQHNpbm9uLnNweSBCYWNrYm9uZS5NYW5hZ2VyLnByb3RvdHlwZSwgJ2luaXRpYWxpemUnXG5cbiAgICAgIG5ldyBCYWNrYm9uZS5NYW5hZ2VyIEByb3V0ZXJcblxuICAgICAgZXhwZWN0KGluaXRTcHkpLnRvLmhhdmUuYmVlbi5jYWxsZWRcblxuICBkZXNjcmliZSAnI19wYXJzZVN0YXRlcycsIC0+XG4gICAgaXQgXCJzaG91bGQgdGhyb3cgZXJyb3IgaWYgdHJhbnNpdGlvbk1ldGhvZCBmb3IgYSBzdGF0ZSBpc24ndCBkZWZpbmVkXCIsIC0+XG4gICAgICBtYW5hZ2VyID0gQmFja2JvbmUuTWFuYWdlci5leHRlbmRcbiAgICAgICAgc3RhdGVzOlxuICAgICAgICAgICd0ZXN0Jzoge31cblxuICAgICAgZXhwZWN0KG1hbmFnZXIuYmluZCBudWxsLCBAcm91dGVyKS50by50aHJvdyBFcnJvclxuICAgIGl0ICcnXG4iXX0=